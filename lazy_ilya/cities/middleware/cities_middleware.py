import json
from typing import Callable
from django.http import HttpResponse
from lazy_ilya.utils.settings_for_app import logger


class CitiesActionLoggingMiddleware:
    """
    Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ cities.
    """

    def __init__(self, get_response: Callable):
        self.get_response = get_response

    def __call__(self, request) -> HttpResponse:
        path = request.path
        method = request.method
        user = request.user
        ip = request.META.get('REMOTE_ADDR')
        user_name = user.username if user.is_authenticated else "–ê–Ω–æ–Ω–∏–º"
        file_names = [f.name for f in request.FILES.getlist("cityFile")] if request.FILES else []
        body_data = None
        if method in ['POST', 'PUT']:
            try:
                if request.content_type == 'application/json':
                    body_data = json.loads(request.body.decode())
                elif 'multipart/form-data' in request.content_type or 'application/x-www-form-urlencoded' in request.content_type:
                    body_data = request.POST.dict()
            except Exception as e:
                body_data = f"[–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}]"
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å file_creator
        if path == '/cities/' and user.is_authenticated:
            if method == 'GET':
                logger.bind(user=user_name).info(
                    f"üìÑ GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ {path} —Å IP {ip}"
                )
        elif path == '/cities/admin/city-info/' and user.is_authenticated:
            if method == 'GET':
                logger.bind(user=user_name).info(
                    f"üìÑ GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω —Ç–∞–±–ª–∏—Ü  {path} —Å IP {ip}"
                )
        elif path == '/cities/admin/' and user.is_authenticated:
            if method == 'GET':
                logger.bind(user=user_name).info(
                    f"üìÑ GET-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥–º–∏–Ω —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–∞–±–æ—Ç—ã —Å –≥–æ—Ä–æ–¥–∞–º–∏ {path} —Å IP {ip}"
                )
        if path.startswith('/cities/cities/') and user.is_authenticated and method in ['PUT', 'DELETE']:
            logger.bind(user=user_name).info(
                f"{'üì§' if method == 'PUT' else 'üíæ'} {method}-–∑–∞–ø—Ä–æ—Å –æ—Ç {user_name} –Ω–∞ {path} —Å IP {ip}. "
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {body_data}"
            )
        elif path.startswith('/cities/admin/') and method in ['POST']:
            files = f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {file_names}"
            logger.bind(user=user_name, filename=','.join(file_names)).info(
                f"{'üì§' if method == 'PUT' else 'üíæ'} {method}-–∑–∞–ø—Ä–æ—Å –æ—Ç {user_name} –Ω–∞ {path} —Å IP {ip}. "
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {body_data} {files if file_names else ''} "
            )
        elif path.startswith('/cities/admin/city-info/') and user.is_authenticated and method in ['POST', 'PUT']:
            logger.bind(user=user_name).info(
                f"{'üì§' if method == 'PUT' else 'üíæ'} {method}-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {user_name} –Ω–∞ {path} —Å IP {ip}. "
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {body_data}"
            )

        try:
            response = self.get_response(request)
        except Exception as e:
            logger.bind(user=user_name).exception(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {method} {path} —Å IP {ip}: {str(e)}"
            )
            raise
        if path == '/cities/' and user.is_authenticated:
            logger.bind(user=user_name).info(
                f"‚úÖ {user_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª {method}-–∑–∞–ø—Ä–æ—Å –Ω–∞ {path} "
                f"—Å IP {ip}. –°—Ç–∞—Ç—É—Å: {response.status_code}"
            )
        elif path.startswith('/cities/cities/') and user.is_authenticated and method in ['PUT', 'DELETE']:
            self.log_response(response, user_name, method, path, ip)
        elif path.startswith('/cities/admin/') and user.is_authenticated and method in ['POST']:
            self.log_response(response, user_name, method, path, ip)
        elif path.startswith('/cities/admin/city-info/') and user.is_authenticated and method in ['POST', 'PUT']:
            self.log_response(response, user_name, method, path, ip)

        return response

    def log_response(self, response: HttpResponse, user_name: str, method: str, path: str, ip: str) -> None:
        """
        –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞.
        """
        content_type = response.get('Content-Type', '')
        body = ''
        if 'application/json' in content_type or 'text' in content_type:
            try:
                body = response.content.decode(errors='ignore')
                if 'application/json' in content_type:
                    body = json.loads(body)
            except Exception as e:
                body = f"[–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: {str(e)}]"

        if response.status_code >= 400:
            logger.bind(user=user_name).warning(
                f"‚ö†Ô∏è {user_name} –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É {response.status_code} –Ω–∞ {method} {path} —Å IP {ip}. "
                f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {body}"
            )
        else:
            logger.bind(user=user_name).info(
                f"‚úÖ {user_name} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª {method}-–∑–∞–ø—Ä–æ—Å –Ω–∞ {path} —Å IP {ip}. "
                f"–°—Ç–∞—Ç—É—Å: {response.status_code}. –û—Ç–≤–µ—Ç: {body}"
            )
