import Choices from 'choices.js';
import 'choices.js/public/assets/styles/choices.min.css';


export class KanbanTasks {
    constructor({addButtonId, boardId, modalId}) {
        this.taskIdCounter = 1;
        this.tasks = {};  // —Ö—Ä–∞–Ω–∏–º –∑–∞–¥–∞—á–∏ –≤ –æ–±—ä–µ–∫—Ç–µ {id: taskData}

        this.addTaskBtn = document.getElementById(addButtonId);
        this.taskBoard = document.getElementById(boardId);
        this.taskModal = document.getElementById(modalId);
        this.taskForm = this.taskModal.querySelector('#task-form');
        this.cancelBtn = this.taskModal.querySelector('#cancel-btn');
        this.closeBtn = this.taskModal.querySelector('#close-modal');

        this.currentEditId = null; // id –∑–∞–¥–∞—á–∏ –≤ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, null –µ—Å–ª–∏ –Ω–æ–≤–∞—è

        // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        this.addTaskBtn.addEventListener('click', () => this.openModal());

        // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª–∫—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ—Ç–º–µ–Ω—É –∏–ª–∏ –∫—Ä–µ—Å—Ç–∏–∫
        this.cancelBtn.addEventListener('click', () => this.closeModal());
        this.closeBtn.addEventListener('click', () => this.closeModal());

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        this.taskForm.addEventListener('submit', (e) => {
            e.preventDefault();
            this.saveTask();
        });
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Choices.js
        const select = this.taskForm.querySelector('select[name="tags"]'); // <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, –±–µ—Ä—ë–º select –∏–∑ —Ñ–æ—Ä–º—ã
        if (!select) {
            throw new Error('Select —Å name="tags" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–æ—Ä–º–µ');
        }

        this.tagsSelect = new Choices(select, {
            removeItemButton: true,
            duplicateItemsAllowed: false,
            addItems: true,
            addItemFilter: value => value.trim().length > 0,
            addChoices: true,
            searchEnabled: true,
            shouldSort: false,
            placeholderValue: '–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏...',
            choices: [
                {value: 'frontend', label: 'frontend'},
                {value: 'backend', label: 'backend'},
                {value: 'urgent', label: 'urgent'}
            ]
        });


        // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.taskBoard.addEventListener('click', (e) => {
            const card = e.target.closest('.task-card');
            if (card) {
                const id = card.dataset.cardId;
                this.openModal(id);
            }
        });

    }


    openModal(taskId = null) {
        this.currentEditId = taskId;

        if (taskId && this.tasks[taskId]) {
            // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const task = this.tasks[taskId];
            this.taskForm.title.value = task.title;
            this.taskForm.desc.value = task.desc;
            this.taskForm.deadline.value = task.deadline;
            this.taskForm.priority.value = task.priority;
            this.taskForm.done.checked = task.done;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ Choices.js
            if (this.tagsSelect) {
                const tagsArray = task.tags ? task.tags.split(',').map(t => t.trim()).filter(Boolean) : [];
                // –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ –≤ –≤–∏–¥–∂–µ—Ç–µ
                this.tagsSelect.removeActiveItems();

                // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏
                tagsArray.forEach(tag => {
                    this.tagsSelect.setChoiceByValue(tag);
                });
            }

        } else {
            // –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–æ—Ä–º—É
            this.taskForm.reset();

            // –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ–≥–∏ –≤ Tom Select, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if (this.tagsSelect) {
                this.tagsSelect.removeActiveItems();
            }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        this.taskModal.classList.remove('hidden');

        // –ü–æ–ª—É—á–∞–µ–º select –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        const select = this.taskForm.querySelector('select[name="assignee"]');
        if (select) {
            // –û—á–∏—â–∞–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º select
            select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è --</option>';

            window.username_data.forEach(user => {
                const option = document.createElement('option');
                const label = user.first_name?.trim() ? user.first_name : user.username;

                option.value = user.username;
                option.textContent = label;

                if (taskId && this.tasks[taskId]?.assignee === user.username) {
                    option.selected = true;
                }

                select.appendChild(option);
            });

            if (!taskId) {
                select.value = '';
            }
        }

        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –≤—ã—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ assignee
        if (taskId && this.tasks[taskId]) {
            this.taskForm.assignee.value = this.tasks[taskId].assignee;
        }
    }


    closeModal() {
        this.taskModal.classList.add('hidden');
    }

    saveTask() {
        const formData = new FormData(this.taskForm);
        const taskData = {
            title: formData.get('title'),
            desc: formData.get('desc'),
            deadline: formData.get('deadline'),
            priority: formData.get('priority'),
            assignee: formData.get('assignee'),
            tags: this.tagsSelect ? this.tagsSelect.getValue(true).join(',') : '', // getValue(true) ‚Äî –≤–µ—Ä–Ω—ë—Ç –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            done: formData.get('done') === 'on',
        };

        if (this.currentEditId) {

            // –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
            this.tasks[this.currentEditId] = taskData;
            this.renderTaskCard(this.currentEditId, taskData, true);

        } else {
            // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            const id = this.taskIdCounter++;
            this.tasks[id] = taskData;
            this.renderTaskCard(id, taskData);
        }

        this.closeModal();
    }

    renderTaskCard(id, taskData, isUpdate = false) {
        let card = this.taskBoard.querySelector(`[data-card-id="${id}"]`);
        if (!card) {
            // –ö–∞—Ä—Ç–æ—á–∫–∏ –µ—â—ë –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
            card = document.createElement('div');
            card.className = 'task-card';
            card.dataset.cardId = id;
            this.taskBoard.appendChild(card);
        } else {
            // –û—á–∏—Å—Ç–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º
            card.innerHTML = '';
            card.className = 'task-card';
            card.dataset.id = id;
        }

        // –¶–≤–µ—Ç –±–æ—Ä–¥–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        const priorityBorderMap = {
            low: 'border-l-success dark:border-l-success-dark',
            medium: 'border-l-warning dark:border-l-warning-dark',
            high: 'border-l-error dark:border-l-error-dark',
        };
        const borderClass = priorityBorderMap[taskData.priority] || 'border-l-gray-300';
        borderClass.split(' ').forEach(cls => card.classList.add(cls));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫
        const titleEl = document.createElement('h3');
        titleEl.className = 'mb-1 truncate font-semibold text-lg';
        titleEl.textContent = taskData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        card.appendChild(titleEl);

        // –°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
        if (taskData.deadline) {
            const deadlineEl = document.createElement('div');
            deadlineEl.className = 'text-xs text-text dark:text-text-dark mb-1';
            deadlineEl.textContent = '–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ' + taskData.deadline;
            card.appendChild(deadlineEl);
        }

        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if (taskData.priority) {
            const priorityMap = {
                low: '‚Äçü¶º –ù–∏–∑–∫–∏–π',
                medium: 'üö∂‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω–∏–π',
                high: 'üî•üèÉ‚Äç‚ôÇÔ∏è–í—ã—Å–æ–∫–∏–π'
            };
            const priorityColorMap = {
                low: 'text-green-600',
                medium: 'text-yellow-600',
                high: 'text-red-700'
            };

            const priorityEl = document.createElement('div');
            priorityEl.className = 'text-xs mb-1';
            const colorClass = priorityColorMap[taskData.priority] || 'text-gray-500';
            const priorityText = priorityMap[taskData.priority] || taskData.priority;

            priorityEl.innerHTML = `<span class="${colorClass} font-medium">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priorityText}</span>`;
            card.appendChild(priorityEl);
        }

        // –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
        if (taskData.assignee) {
            const assigneeEl = document.createElement('div');
            assigneeEl.className = 'text-xs text-text dark:text-text-dark mb-1';
            assigneeEl.textContent = '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ' + taskData.assignee;
            card.appendChild(assigneeEl);
        }

        // –¢–µ–≥–∏
        if (taskData.tags) {
            const tagsEl = document.createElement('div');
            tagsEl.className = 'text-xs mb-1 flex flex-wrap gap-1';

            const tagColors = ['text-red-500', 'text-green-500', 'text-blue-500', 'text-yellow-600', 'text-purple-500'];
            const tagsArray = taskData.tags.split(',').map(tag => tag.trim()).filter(Boolean);

            tagsArray.forEach((tag, index) => {
                const tagSpan = document.createElement('span');
                tagSpan.textContent = `#${tag}`;
                tagSpan.className = tagColors[index % tagColors.length];
                tagsEl.appendChild(tagSpan);
            });

            card.appendChild(tagsEl);
        }

        // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        const doneEl = document.createElement('div');
        doneEl.className = 'text-xs font-semibold ' + (taskData.done ? 'text-green-700' : 'text-red-600');
        doneEl.textContent = taskData.done ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
        card.appendChild(doneEl);
    }


}
