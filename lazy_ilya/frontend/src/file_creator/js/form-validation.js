import setupFileUpload from './file-upload.js';

const {clearFileList} = setupFileUpload(); // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—á–∏—Å—Ç–∫–∏
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É:
 * - –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã
 * - –§–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤ (.doc, .docx, .rtf)
 * - –ù–∞—á–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä > 0
 * - –£–∫–∞–∑–∞–Ω –ª–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
 */
export default function setupFormValidation() {
    const formDiv = document.getElementById('step1-form')
    const form = document.getElementById('file-upload-form');
    const fileLabel = document.getElementById('files-label');
    const fileInput = document.getElementById('files');
    const startNumberLabel = document.getElementById('start-number-label');
    const startNumberInput = document.getElementById('start-number');
    const deviceTypeLabel = document.getElementById('device-type-label');
    const deviceTypeInput = document.getElementById('device-type');

    const filesError = document.getElementById('files-error');
    const startNumberError = document.getElementById('start-number-error');
    const deviceTypeError = document.getElementById('device-type-error');
    const spinner = document.getElementById('upload-spinner');

    /**
     * –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∏–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    const resetErrors = () => {
        [filesError, startNumberError, deviceTypeError].forEach(el => el.classList.add('hidden'));
    };

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º —Å—Ç–∏–ª–µ–π —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
     * @param {HTMLElement} input - –ø–æ–ª–µ –≤–≤–æ–¥–∞
     * @param {HTMLElement} label - —Å–≤—è–∑–∞–Ω–Ω—ã–π label
     * @param {HTMLElement} errorEl - —ç–ª–µ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏
     * @param {string} [message] - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
     */
    const showError = (input, label, errorEl, message = '') => {
        if (message) errorEl.textContent = message;
        errorEl.classList.remove('hidden');
        input.classList.remove('correct_input');
        input.classList.add('error_input');
        label.classList.remove('correct_label');
        label.classList.add('error_label');

        setTimeout(() => {
            errorEl.classList.add('hidden');
            input.classList.add('correct_input');
            input.classList.remove('error_input');
            label.classList.add('correct_label');
            label.classList.remove('error_label');
        }, 3000);
    };

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ —Ñ–∞–π–ª—ã, –∏ –≤—Å–µ –ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
     * @returns {boolean}
     */
    const validateFiles = () => {
        const allowedExtensions = ['.doc', '.docx', '.rtf'];
        if (fileInput.files.length === 0) {
            showError(fileInput, fileLabel, filesError, '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª.');
            return false;
        }

        for (let i = 0; i < fileInput.files.length; i++) {
            const file = fileInput.files[i];
            const ext = file.name.slice(((file.name.lastIndexOf(".") - 1) >>> 0) + 2).toLowerCase();
            if (!allowedExtensions.includes('.' + ext)) {
                showError(fileInput, fileLabel, filesError, '–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .doc, .docx, .rtf');
                return false;
            }
        }
        return true;
    };

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ > 0
     * @returns {boolean}
     */
    const validateStartNumber = () => {
        const value = startNumberInput.value.trim();
        const number = Number(value);
        if (value === '' || isNaN(number) || number <= 0) {
            showError(startNumberInput, startNumberLabel, startNumberError, '–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è.');
            return false;
        }
        return true;
    };

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–±—Ä–∞–Ω –ª–∏ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
     * @returns {boolean}
     */
    const validateDeviceType = () => {
        if (deviceTypeInput.value === '') {
            showError(deviceTypeInput, deviceTypeLabel, deviceTypeError, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
            return false;
        }
        return true;
    };

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ fetch
     * @returns {Promise<void>}
     */
    const submitFormAsync = async () => {
        const formData = new FormData(form);

        try {
            spinner.classList.remove('hidden'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä

            await new Promise(resolve => setTimeout(resolve, 2000)); // ‚è± –ü–∞—É–∑–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            const response = await fetch(form.action, {
                method: 'POST',
                body: formData,
            });
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            const data = await response.json(); // –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON

            if (!response.ok) {
                throw new Error(data.error || `–û—à–∏–±–∫–∞: ${response.status}`);
            }


            console.log('–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);

            form.reset(); // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
            clearFileList(); // –æ—á–∏—â–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, –∫–∞–∫ –≤ step-navigation.js
            formDiv.classList.remove('show');
            setTimeout(() => {
                formDiv.classList.add('hidden');
            }, 500);

            // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç .step —Å data-step="1" –∏ –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
            const step1 = document.querySelector('.step[data-step="1"]');
            if (step1) {
                step1.classList.remove('li-style-active');
                step1.classList.add('li-style-complete');
                step1.classList.add('pointer-events-none');
                // –ó–∞–º–µ–Ω–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ <span> –≤–Ω—É—Ç—Ä–∏ —à–∞–≥–∞ –Ω–∞ –∏–∫–æ–Ω–∫—É
                const span = step1.querySelector('span');
                span.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">\n' +
                    '  <path stroke-linecap="round" stroke-linejoin="round" d="M15.59 14.37a6 6 0 0 1-5.84 7.38v-4.8m5.84-2.58a14.98 14.98 0 0 0 6.16-12.12A14.98 14.98 0 0 0 9.631 8.41m5.96 5.96a14.926 14.926 0 0 1-5.841 2.58m-.119-8.54a6 6 0 0 0-7.381 5.84h4.8m2.581-5.84a14.927 14.927 0 0 0-2.58 5.84m2.699 2.7c-.103.021-.207.041-.311.06a15.09 15.09 0 0 1-2.448-2.448 14.9 14.9 0 0 1 .06-.312m-2.24 2.39a4.493 4.493 0 0 0-1.757 4.306 4.493 4.493 0 0 0 4.306-1.758M16.5 9a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0Z" />\n' +
                    '</svg>\n';

            }

        } catch (error) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –±–ª–æ–∫–µ server-error
            const errorBlock = document.getElementById('server-error');
            const errorMessage = error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤ –±–ª–æ–∫–µ –∏ –¥–µ–ª–∞–µ–º –µ–≥–æ –≤–∏–¥–∏–º—ã–º
            errorBlock.classList.remove('hidden', 'animate-popup-reverse');
            const errorText = errorBlock.querySelector('p');
            errorBlock.classList.add("flex", "animate-popup");
            errorText.textContent = errorMessage;

            console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);

            // –ü—Ä—è—á–µ–º –±–ª–æ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ—é –∑–∞–¥–µ—Ä–∂–∫—É
            // üïí –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                errorBlock.classList.remove("animate-popup");
                errorBlock.classList.add("animate-popup-reverse");

                // ‚è±Ô∏è –°–∫—Ä—ã—Ç—å –±–ª–æ–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã)
                setTimeout(() => {
                    errorBlock.classList.add("hidden");
                    errorBlock.classList.remove("flex", "animate-popup-reverse");
                }, 1000); // –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é fade-in-out-reverse
            }, 4000); // –∏–∑–Ω–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º
        } finally {
            spinner.classList.add('hidden'); // –°–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏–Ω–Ω–µ—Ä –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        }
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        resetErrors();

        const isValid =
            validateFiles() &
            validateStartNumber() &
            validateDeviceType();

        if (isValid) {
            submitFormAsync(); // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
        }
    });
}
