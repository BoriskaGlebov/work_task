from django.db import models
from django.contrib.auth import get_user_model

User = get_user_model()


class StickyNote(models.Model):
    """
    –ú–æ–¥–µ–ª—å StickyNote –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ç–∏–∫–µ—Ä (–∑–∞–º–µ—Ç–∫—É), —Ä–∞–∑–º–µ—â–∞–µ–º—É—é –Ω–∞ –¥–æ—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ê—Ç—Ä–∏–±—É—Ç—ã:
        owner (ForeignKey): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∑–∞–º–µ—Ç–∫–∞.
        text (TextField): –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–¥–µ—Ä–∂–∏—Ç '–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞...'.
        color (CharField): –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–º–µ—Ç–∫–∏ –≤ HEX-—Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é '#FFEB3B' (–∂—ë–ª—Ç—ã–π).
        width (PositiveIntegerField): –®–∏—Ä–∏–Ω–∞ –∑–∞–º–µ—Ç–∫–∏.
        height (PositiveIntegerField): –í—ã—Å–æ—Ç–∞ –∑–∞–º–µ—Ç–∫–∏.
        order (PositiveIntegerField): –ü–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∑–∞–º–µ—Ç–æ–∫.
        author_name (CharField): –ê–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥—Ä–µ—Å–∞—Ç –∑–∞–º–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í—Å–µ–º!', '–î–ª—è —Å–µ–±—è' –∏ —Ç.–¥.).
        created_at (DateTimeField): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
        updated_at (DateTimeField): –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.

    –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:
        ordering: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –ø–µ—Ä–≤–æ–≥–æ.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        note = StickyNote.objects.create(owner=some_user, text='–ù–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤—Å—Ç—Ä–µ—á–µ')

    """
    text = models.TextField(default='–ù–æ–≤–∞—è –∑–∞–º–µ—Ç–∫–∞...', blank=True, verbose_name="–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏")
    color = models.CharField(max_length=20, default='#FFEB3B', verbose_name="–¶–≤–µ—Ç –∑–∞–º–µ—Ç–∫–∏")
    author_name = models.CharField(max_length=500, blank=True, verbose_name="–ê–≤—Ç–æ—Ä")
    owner = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sticky_notes',
                              verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    width = models.PositiveIntegerField(default=300, verbose_name="–®–∏—Ä–∏–Ω–∞")  # –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    height = models.PositiveIntegerField(default=200, verbose_name="–í—ã—Å–æ—Ç–∞")  # –≤ –ø–∏–∫—Å–µ–ª—è—Ö
    order = models.PositiveIntegerField(default=0)  # –ø–æ–∑–∏—Ü–∏—è —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –∑–∞–º–µ—Ç–æ–∫

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è")

    class Meta:
        ordering = ['order']
        verbose_name = "–¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤ –∑–∞–º–µ—Ç–æ–∫"

    def __str__(self):
        return f"–ó–∞–º–µ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.owner.username} (id={self.id})"

    def save(self, *args, **kwargs):
        if not self.owner:
            if self.user.first_name:
                self.author = self.user.first_name
            else:
                self.author = self.owner.username
        super().save(*args, **kwargs)

    def to_dict(self) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –æ–±—ä–µ–∫—Ç –≤ —Å–ª–æ–≤–∞—Ä—å."""
        return {
            "id": self.id,
            "owner": self.owner.first_name if self.owner.first_name else self.owner.username,
            "text": self.text,
            "color": self.color,
            "width": self.width,
            "height": self.height,
            "author_name": self.author_name,
            "order": self.order,

        }


class Task(models.Model):
    PRIORITY_CHOICES = [
        ('low', '‚Äçü¶º –ù–∏–∑–∫–∏–π'),
        ('medium', '‚Äçüö∂‚Äç‚ôÇÔ∏è –°—Ä–µ–¥–Ω–∏–π'),
        ('high', 'üî•üèÉ‚Äç‚ôÇÔ∏è–í—ã—Å–æ–∫–∏–π'),
    ]

    class Meta:
        verbose_name = "–¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

    title = models.CharField(max_length=255, verbose_name="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏")
    desc = models.TextField(blank=True, verbose_name="–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
    deadline = models.DateField(null=True, blank=True, verbose_name="–°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES, default='medium',
                                verbose_name="–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏")
    done = models.BooleanField(default=False, verbose_name="–û—Ç–º–µ—Ç–∫–∞ –æ–± –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏")

    assignee = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='tasks',
                                 verbose_name="–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
    tags = models.ManyToManyField('Tag', blank=True, related_name='tasks', verbose_name="–¢–µ–≥–∏")

    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ")

    def __str__(self):
        return self.title


class Tag(models.Model):
    name = models.CharField(max_length=50, unique=True, verbose_name="–ù–∞–∑–≤–∞–Ω–∏–µ –¢–µ–≥–∞")
    class Meta:
        verbose_name="–¢–∞–±–ª–∏—Ü–∞ –¢–µ–≥–æ–≤"
    def __str__(self):
        return self.name
